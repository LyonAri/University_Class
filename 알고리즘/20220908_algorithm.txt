알고리즘의 일반적 특성
정확성
-알고리즘은 주어진 입력에 대해 올바른 해(출력)를 주어야한다.->동일 입력->동일 출력
수행성
-알고리즘의 각 단계는 컴퓨터에서 수행 가능해야 한다.
유한성
-알고리즘은 일정안 시간 내에 종료되어야 한다.
효율성
-알고리즘은 효율적(시간, 메모리)일수록 그 가치가 높아진다.

최초의 알고리즘
-유클리드의 최대공약수 알고리즘
기원전 300년경에 만들어진 가장 오래된 알고리즘
최대공약수는 2개 이상의 자연수의 공약수들 중에서 가장 큰 수
유클리드는 2개의 자연수의 최대공약수는 큰 수에서 작은 수를 뺀 수와 작은 수와의
최대공약수와 같다는 성질을 이용하여 최대공약수를 찾음

알고리즘의 표현 방법
일반적으로 알고리즘은 프로그래밍 언어와 유사한
의사 코드(pseudo code)로 표현 -> 설계도
ex)설계도를 대충 그려서 주면 이렇게 지어줘 하지,
 다 지어놓고 이렇게 지어줘 라고 하진 않기 때문에

알고리즘의 분류(종류)
문제의 해결 방식에 따른 분류
-분할 정복(Divide-and-Conquer) 알고리즘
-그리디(Greedy) 알고리즘
-동적 계획(Dynamic Programming) 알고리즘
-근사(Approximation) 알고리즘
-백트래킹(Backtracking) 기법
-분기 한정(Branch-and-Bound) 기법

알고리즘의 종류
문제에 기반한 종류
-정렬 알고리즘
-그래프 알고리즘
-기하 알고리즘

특정 환경에 따른 종류
-병렬(Parallel) 알고리즘
-분산(Distributed) 알고리즘
-양자(Quantum) 알고리즘

기타 알고리즘
-인공지능(개, 고양이 사진 분류)

알고리즘의 효율성
-알고리즘의 수행시간 또는 알고리즘이 수행하는 동안 
 사용되는 메모리 공간의 크기로 나타냄
-각각 시간복잡도, 공간복잡도라고 함
-일반적으로 알고리즘들을 비교할 때에는 시간복잡도가 주로 사용됨

시간복잡도
시간복잡도는 알고리즘이 실행되는 동안에 사용된 기본적인 연산 횟수를
입력 크기의 함수로 나타냄
(기본 연산 : 데이터 간 크기 비교, 데이터 읽기 및 갱싱, 숫자 계산 등와 같은 단순 연산)

알고리즘의 복잡도 표현 방법
최악의 경우 분석(Worst-case Analysis)
-"어떤 입력이 주어지더라도 알고리즘의 수행시간이 얼마 이상은 넘지 않는다."
 라는 상한(Upper Bound)의 의미

평균의 경우 분석(Average-case Analysis)
-입력의 확률 분포를 가정하여 분석하는데,
 일반적으로 균등 분포(Uniform Distribution)를 가정

최선의 경우 분석(Best-case Analysis)
-가장 빠른 수행 시간을 분석하며, 최적(Optimal)알고리즘을 찾는 활용

ex) 등교 시간 분석

