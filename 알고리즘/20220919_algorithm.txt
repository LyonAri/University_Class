점화식의 이해
점화식
- 어떤 함수를 자신보다 더 작은 변수에 대한 함수와의 관계로 표현한 것


병합 정렬의 수행 시간

오름차순으로 정렬
8 7 6 5 4 3 2 1		분할
8 7 6 5 | 4 3 2 1		분할
8 7 | 6 5 | 4 3 | 2 1		분할
8 | 7 | 6| 5 | 4 | 3 | 2 | 1	
7 8 | 5 6 | 3 4 | 1 2		병합
5 6 7 8 | 1 2 3 4		병합
1 2 3 4 5 6 7 8		병합

merge(A, p, q) -> T(n/2)
merge(A, q+1, r) -> T(n/2)
merge(A, p, q, r) -> O(n)

T(n) = 2T(n/2) + O(n) [오버헤드]

- 크기가 n인 병합 정렬 시간은 크기가 n/2인 병합 정렬을 두 번하는 시간과
나머지 오버헤드를 더한 시간이다.


점화식의 점근적 분석 방법
- 반복 대치
: 더 작은 문제에 대한 함수로 반복해서 대치해 나가는 해법

- 추정후 증명
: 결론은 추정하고 수학적 귀납법으로 이용하여 증명하는 방법

- 마스터 정리
: 형식(특정한 모양)에 맞는 점화식의 복잡도를 바로 알 수 있다


T(n) = T(n-1) + c	-> n>1
T(1) ≤ c		-> n=1

factorial(n) -> T(n)
factorial(n-1) -> T(n-1)
T(n) = T(n-1) + c

T(n) = T(n-1) + c 	-> T(n-1) = T(n-2) + c
			-> T(n-2) = T(n-3) + c
...
T(1)+(n-1)c
≤ c + (n-1)c
=cn
=O(n)


반복 대치(병합정렬)

T(n) = 2T(n/2) + n
T(1) = 1
ex) n = 2의 k승 가정
T(n/2) = 2*T(n/4) + (n/2)

...
n=2의 k승
log n = k * 1
= 2의 k승T(n/2의 k승) + kn
= n + nlogn
= O(nlogn)


반복 대치 (병합정렬)
n ≠ 2의 k승 가정

* 임의의 n에 대해 n과 2n 사이에 2의 k승인 수가 존재
-  n ≤ 2의 k승 ≤ 2n
* T(n) = O(n의 r승) 이라 가정하면, T(2n) = O((2n)r승)
* T(n)이 단조 증가 함수인 경우, T(n) ≤ T(2의 k승) ≤ T(2n)
				      O(n의 r승)  O(n의 r승)  O(n의 r승)
		단조 증가 함수 -> 입력이 커지면 실행시간이 더 걸릴 수 밖에 없는 함수


추정 후 증명
* 귀납법을 이용
귀납 : 개별적인 특수한 사실이나 원리로부터 일반적이고
보편적인 명제 및 법칙을 유도해 내는 일

수학적 귀납법
모든 자연수 n에 대하여
1+2+3+4+...+n = n(n+1)/2
이 성립함을 등차수열의 합의 공식 이외의 방법으로 증명하여 보자.

수학적 귀납법
자연수 n에 대한 명제 p(n)이 모든 자연수 n에 대하여 성립함을 증명하려면 다음
두 가지를 보이면 된다.
(1) n = 1 일 때 명제 p(n)이 성립한다.
(2) n = k 일 때 명제 p(n)이 성립한다고 가정하면
    n = k + 1 일 때에도 명제 p(n)이 성립한다.


추정 후 증명 (병합정렬) : 예제 3-1
T(n) = 2T(n/2) + n

추정 : T(n) = O(nlogn), 즉 T(n) ≤ cnlogn

경계조건 : T(2) ≤ 2clog(2)를 만족하는 C가 존재한다.
귀납적 가정과 전개 : n/2에 대해 T(n/2) ≤ C(n/2)log(n/2)를 만족한다 가정

1. Base ->참
2. 내 앞의 애가 참이라고 가정
3. 내가 참임을 증명

T(n) = 2T(n/2) + n
	≤ 2c(n/2)log(n/2) + n	-> □
	= cnlogn - cnlog2 + n
	= cnlogn + (-clog2 + 1)n
	≤ cnlogn		<- 이를 만족하는 c가 존재한다

수직선에 매핑해서 생각하면 쉽게 이해 할 수 있음
-----|------|-------|--------|---
            T(n)     □    cnlogn


추정 후 증명 (병합정렬) : 예제 3-2
T(n) ≤ 2T(n/2 +10) + n의 접근적 복잡도는
T(n) = O(nlog(n))임을 증명하라.
-> 충분히 큰 n에 대해 T(n) ≤ cnlog(n)인 양의 상수 C가 존재

T(2) ≤ 2T(11)+2
-> 단조증가함수로 T(2)<T(11) 임

T(n/2) ≤ 2T(n/4+10)+n/2
T(n/2 + 10) ≤ 2T(n/4 + 5 + 10) + n/2 + 10
T(n/2 + 10) ≤ c(n/2+10)log(n/2 + 10)		: 참

n/2+10 => 3n/4	: 치환

-----|--------------|------------------|-------|---------|------
    T(n)       2T(n/2+10)+n          B       C      cnlogn

(수직선 꼭 그려야 이해하기 편함)


추정 후 증명 : 유의 사항
- 귀납적 가정에서 사용한 상수 C와 결론에서 사용한 상수 C가 같아야 한다.

귀납적 가정 : T(n/2) ≤ cn/2 -> 도출해야 할 결론 : T(n) ≤ cn

---------|--------|--------------|----------------|
        T(n)      cn        A=2T(n/2)+n     B=(c+1)n
<----------------|	 우리가 원하는 증명   T(n) ≤ cn
<-----------------------------------------------|	포함시키면 안되는 부분까지 포함함
                                                            T(n) ≤ B